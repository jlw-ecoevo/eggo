## JLW 2020 - Do big cells grow fast?
# Load Packages ----------------------------------------------------------------
library(dplyr)
library(data.table)
library(ggplot2)
library(ggpubr)
library(RColorBrewer)
# Helper Function --------------------------------------------------------------
merge.easy <- function(df1,df2,key){
df1 <- data.table(df1,key=key)
df2 <- data.table(df2,key=key)
return(unique(merge(df1,df2,all.x=TRUE,by=.EACHI,allow.cartesian=TRUE)))
}
# Load Data --------------------------------------------------------------------
setwd("~/eggo/Data/eggo-data")
load("CodonStatistics_GORG.RData")
sag_df$CUBgenomic <- sag_df$CUBgenomic %>% lapply(median) %>% unlist()
sag_df <- sag_df %>% mutate_all(unlist)
sag_df <- sag_df %>% subset(nHE>=10)
setwd("~/eggo/Data/")
load("GORGsize.RData")
sag_df <- merge.easy(sag_df,gorg_sizes,key="ID")
sdf <- sag_df %>% subset(!is.na(CellDiameter)) %>%
subset(CellDiameter!="<0.5")%>%
mutate(CellDiameter=as.numeric(CellDiameter))
sdf <- sdf %>% mutate(CellDiameter=as.numeric(CellDiameter))
# Stats ------------------------------------------------------------------------
table(sdf$CellDiameter < quantile((sdf$CellDiameter),c(0.99)),
sdf$d > quantile((sdf$d),c(0.01))) %>%
fisher.test()
# Plot -------------------------------------------------------------------------
p1 <- ggplot(sdf,aes(y=CellDiameter,x=d)) +
geom_point(alpha=0.5) + scale_y_log10() + scale_x_log10() + geom_smooth() +
theme_bw() + xlab(expression("Cell Diameter (" * mu * "m)")) +
xlab("Predicted Doubling Time (Hours)") +
geom_hline(yintercept=quantile((sdf$CellDiameter),c(0.99)),lty=2,col="red") +
geom_vline(xintercept=quantile((sdf$d),c(0.01)),lty=2,col="red")
p2 <- ggplot(sdf,aes(x=d,fill=(CellDiameter>quantile((sdf$CellDiameter),c(0.99))))) +
geom_density(alpha=0.5) + theme_bw() +
scale_x_log10() + labs(fill="Top 1% Cell Size?") +
xlab("Predicted Doubling Time (Hours)") +
theme(legend.position = "top") +
scale_fill_manual(values = brewer.pal(4,"Set1")[1:2])
p3 <- ggplot(sdf %>% subset(CellDiameter>0),
aes(x=CellDiameter,fill=d<quantile((sdf$d),c(0.01)))) +
geom_density(alpha=0.5) + theme_bw() +
labs(fill="Top 1% Growth Rate?") +
theme(legend.position = "top") +
xlab(expression("Cell Diameter (" * mu * "m)")) +
scale_fill_manual(values = brewer.pal(4,"Set1")[4:3])
setwd("~/eggo/Figs")
pdf("GORGSize.pdf",width=7,height=10)
ggarrange(p1,
ggarrange(p2,
p3,
ncol=2,
labels=c("(b)","(c)")),
nrow=2,
labels=c("(a)",""))
dev.off()
## JLW 2020 - Do big cells grow fast?
# Load Packages ----------------------------------------------------------------
library(dplyr)
library(data.table)
library(ggplot2)
library(ggpubr)
library(RColorBrewer)
# Helper Function --------------------------------------------------------------
merge.easy <- function(df1,df2,key){
df1 <- data.table(df1,key=key)
df2 <- data.table(df2,key=key)
return(unique(merge(df1,df2,all.x=TRUE,by=.EACHI,allow.cartesian=TRUE)))
}
# Load Data --------------------------------------------------------------------
setwd("~/eggo/Data/eggo-data")
load("CodonStatistics_GORG.RData")
sag_df$CUBgenomic <- sag_df$CUBgenomic %>% lapply(median) %>% unlist()
sag_df_all <- sag_df %>% mutate_all(unlist)
sag_df <- sag_df_all %>% subset(nHE>=10)
setwd("~/eggo/Data/")
load("GORGsize.RData")
sag_df <- merge.easy(sag_df,gorg_sizes,key="ID")
sdf <- sag_df %>% subset(!is.na(CellDiameter)) %>%
subset(CellDiameter!="<0.5")%>%
mutate(CellDiameter=as.numeric(CellDiameter))
sdf <- sdf %>% mutate(CellDiameter=as.numeric(CellDiameter))
# Stats ------------------------------------------------------------------------
table(sdf$CellDiameter < quantile((sdf$CellDiameter),c(0.99)),
sdf$d > quantile((sdf$d),c(0.01))) %>%
fisher.test()
# Plot -------------------------------------------------------------------------
p1 <- ggplot(sdf,aes(y=CellDiameter,x=d)) +
geom_point(alpha=0.5) + scale_y_log10() + scale_x_log10() + geom_smooth() +
theme_bw() + xlab(expression("Cell Diameter (" * mu * "m)")) +
xlab("Predicted Doubling Time (Hours)") +
geom_hline(yintercept=quantile((sdf$CellDiameter),c(0.99)),lty=2,col="red") +
geom_vline(xintercept=quantile((sdf$d),c(0.01)),lty=2,col="red")
p2 <- ggplot(sdf,aes(x=d,fill=(CellDiameter>quantile((sdf$CellDiameter),c(0.99))))) +
geom_density(alpha=0.5) + theme_bw() +
scale_x_log10() + labs(fill="Top 1% Cell Size?") +
xlab("Predicted Doubling Time (Hours)") +
theme(legend.position = "top") +
scale_fill_manual(values = brewer.pal(4,"Set1")[1:2])
p3 <- ggplot(sdf %>% subset(CellDiameter>0),
aes(x=CellDiameter,fill=d<quantile((sdf$d),c(0.01)))) +
geom_density(alpha=0.5) + theme_bw() +
labs(fill="Top 1% Growth Rate?") +
theme(legend.position = "top") +
xlab(expression("Cell Diameter (" * mu * "m)")) +
scale_fill_manual(values = brewer.pal(4,"Set1")[4:3])
setwd("~/eggo/Figs")
pdf("GORGSize.pdf",width=7,height=10)
ggarrange(p1,
ggarrange(p2,
p3,
ncol=2,
labels=c("(b)","(c)")),
nrow=2,
labels=c("(a)",""))
dev.off()
head(sag_df)
ggplot(sag_df_all,aes(x=nHE, y=d)) + geom_point()
ggplot(sag_df_all,aes(x=nHE, y=d)) + geom_point() + geom_smooth()
ggplot(sag_df_all,aes(x = nHE, y = d)) + geom_point() +
scale_y_log10() + geom_smooth() + theme_bw() +
geom_vline(xintercept = 10, color = "red", lty = 5) +
ylab("Predicted Doubling Time (Hours)") +
xlab("Number of Ribosomal Proteins")
## JLW 2020 - Do big cells grow fast?
# Load Packages ----------------------------------------------------------------
library(dplyr)
library(data.table)
library(ggplot2)
library(ggpubr)
library(RColorBrewer)
# Helper Function --------------------------------------------------------------
merge.easy <- function(df1,df2,key){
df1 <- data.table(df1,key=key)
df2 <- data.table(df2,key=key)
return(unique(merge(df1,df2,all.x=TRUE,by=.EACHI,allow.cartesian=TRUE)))
}
# Load Data --------------------------------------------------------------------
setwd("~/eggo/Data/eggo-data")
load("CodonStatistics_GORG.RData")
sag_df$CUBgenomic <- sag_df$CUBgenomic %>% lapply(median) %>% unlist()
sag_df_all <- sag_df %>% mutate_all(unlist)
sag_df <- sag_df_all %>% subset(nHE>=10)
setwd("~/eggo/Data/")
load("GORGsize.RData")
sag_df <- merge.easy(sag_df,gorg_sizes,key="ID")
sdf <- sag_df %>% subset(!is.na(CellDiameter)) %>%
subset(CellDiameter!="<0.5")%>%
mutate(CellDiameter=as.numeric(CellDiameter))
sdf <- sdf %>% mutate(CellDiameter=as.numeric(CellDiameter))
# Stats ------------------------------------------------------------------------
table(sdf$CellDiameter < quantile((sdf$CellDiameter),c(0.99)),
sdf$d > quantile((sdf$d),c(0.01))) %>%
fisher.test()
# Plot -------------------------------------------------------------------------
p1 <- ggplot(sdf,aes(y=CellDiameter,x=d)) +
geom_point(alpha=0.5) + scale_y_log10() + scale_x_log10() + geom_smooth() +
theme_bw() + xlab(expression("Cell Diameter (" * mu * "m)")) +
xlab("Predicted Doubling Time (Hours)") +
geom_hline(yintercept=quantile((sdf$CellDiameter),c(0.99)),lty=2,col="red") +
geom_vline(xintercept=quantile((sdf$d),c(0.01)),lty=2,col="red")
p2 <- ggplot(sdf,aes(x=d,fill=(CellDiameter>quantile((sdf$CellDiameter),c(0.99))))) +
geom_density(alpha=0.5) + theme_bw() +
scale_x_log10() + labs(fill="Top 1% Cell Size?") +
xlab("Predicted Doubling Time (Hours)") +
theme(legend.position = "top") +
scale_fill_manual(values = brewer.pal(4,"Set1")[1:2])
p3 <- ggplot(sdf %>% subset(CellDiameter>0),
aes(x=CellDiameter,fill=d<quantile((sdf$d),c(0.01)))) +
geom_density(alpha=0.5) + theme_bw() +
labs(fill="Top 1% Growth Rate?") +
theme(legend.position = "top") +
xlab(expression("Cell Diameter (" * mu * "m)")) +
scale_fill_manual(values = brewer.pal(4,"Set1")[4:3])
setwd("~/eggo/Figs")
pdf("GORGSize.pdf",width=7,height=10)
ggarrange(p1,
ggarrange(p2,
p3,
ncol=2,
labels=c("(b)","(c)")),
nrow=2,
labels=c("(a)",""))
dev.off()
# nHE Relationship -------------------------------------------------------------
setwd("~/eggo/Figs")
pdf("GORG_cutoff.pdf", width = 7, height = 5)
ggplot(sag_df_all,aes(x = nHE, y = d)) + geom_point() +
scale_y_log10() + geom_smooth() + theme_bw() +
geom_vline(xintercept = 10, color = "red", lty = 5) +
ylab("Predicted Doubling Time (Hours)") +
xlab("Number of Ribosomal Proteins")
dev.off()
## JLW 2020 - Do big cells grow fast?
# Load Packages ----------------------------------------------------------------
library(dplyr)
library(data.table)
library(ggplot2)
library(ggpubr)
library(RColorBrewer)
# Helper Function --------------------------------------------------------------
merge.easy <- function(df1,df2,key){
df1 <- data.table(df1,key=key)
df2 <- data.table(df2,key=key)
return(unique(merge(df1,df2,all.x=TRUE,by=.EACHI,allow.cartesian=TRUE)))
}
# Load Data --------------------------------------------------------------------
setwd("~/eggo/Data/eggo-data")
load("CodonStatistics_GORG.RData")
sag_df$CUBgenomic <- sag_df$CUBgenomic %>% lapply(median) %>% unlist()
sag_df_all <- sag_df %>% mutate_all(unlist)
sag_df <- sag_df_all %>% subset(nHE>=10)
setwd("~/eggo/Data/")
load("GORGsize.RData")
sag_df <- merge.easy(sag_df,gorg_sizes,key="ID")
sdf <- sag_df %>% subset(!is.na(CellDiameter)) %>%
subset(CellDiameter!="<0.5")%>%
mutate(CellDiameter=as.numeric(CellDiameter))
sdf <- sdf %>% mutate(CellDiameter=as.numeric(CellDiameter))
# Stats ------------------------------------------------------------------------
table(sdf$CellDiameter < quantile((sdf$CellDiameter),c(0.99)),
sdf$d > quantile((sdf$d),c(0.01))) %>%
fisher.test()
# Plot -------------------------------------------------------------------------
p1 <- ggplot(sdf,aes(y=CellDiameter,x=d)) +
geom_point(alpha=0.5) + scale_y_log10() + scale_x_log10() + geom_smooth() +
theme_bw() + xlab(expression("Cell Diameter (" * mu * "m)")) +
xlab("Predicted Doubling Time (Hours)") +
geom_hline(yintercept=quantile((sdf$CellDiameter),c(0.99)),lty=2,col="red") +
geom_vline(xintercept=quantile((sdf$d),c(0.01)),lty=2,col="red")
p2 <- ggplot(sdf,aes(x=d,fill=(CellDiameter>quantile((sdf$CellDiameter),c(0.99))))) +
geom_density(alpha=0.5) + theme_bw() +
scale_x_log10() + labs(fill="Top 1% Cell Size?") +
xlab("Predicted Doubling Time (Hours)") +
theme(legend.position = "top") +
scale_fill_manual(values = brewer.pal(4,"Set1")[1:2])
p3 <- ggplot(sdf %>% subset(CellDiameter>0),
aes(x=CellDiameter,fill=d<quantile((sdf$d),c(0.01)))) +
geom_density(alpha=0.5) + theme_bw() +
labs(fill="Top 1% Growth Rate?") +
theme(legend.position = "top") +
xlab(expression("Cell Diameter (" * mu * "m)")) +
scale_fill_manual(values = brewer.pal(4,"Set1")[4:3])
setwd("~/eggo/Figs")
pdf("GORGSize.pdf",width=7,height=10)
ggarrange(p1,
ggarrange(p2,
p3,
ncol=2,
labels=c("(b)","(c)")),
nrow=2,
labels=c("(a)",""))
dev.off()
# nHE Relationship -------------------------------------------------------------
setwd("~/eggo/Figs")
pdf("GORG_cutoff.pdf", width = 7, height = 5)
ggplot(sag_df_all,aes(x = nHE, y = d)) + geom_point() +
scale_y_log10() + geom_smooth() + theme_bw() +
geom_vline(xintercept = 10, color = "red", lty = 5) +
ylab("Predicted Doubling Time (Hours)") +
xlab("Number of Ribosomal Proteins")
dev.off()
load("/home/jake/eggo/Data/stat_data.RData")
View(stat_data)
setwd("~/eggo/Data/gRodon-files/")
load("Accession2Species.rda")
load("GrowthRates.rda")
load("GrowthRates.rda")
load("Accession2Species.rda")
View(d)
setwd("~/eggo/Data/")
spp_phy <- read.delim("phyla.tbl",stringsAsFactors = F,header = F)
head(spp_phy)
## JLW 2020
set.seed(123456)
# Load Packages ----------------------------------------------------------------
library(dplyr)
library(data.table)
library(ggplot2)
library(ggpubr)
# Helper Functions -------------------------------------------------------------
merge.easy <- function(df1,df2,key){
df1 <- data.table(df1,key=key)
df2 <- data.table(df2,key=key)
return(unique(merge(df1,df2,all.x=TRUE,by=.EACHI,allow.cartesian=TRUE)))
}
rgrep <- function(big,small_vec){
small_vec[lapply(small_vec,grepl,x=big) %>% unlist()]
}
boxcoxTransform <- function(x, lambda, back_transform = F) {
if (back_transform == TRUE) {
(x*lambda +1)^(1/lambda)  %>% return()
} else {
(((x^lambda) - 1) / lambda) %>% return()
}
}
# Compile Dataset --------------------------------------------------------------
setwd("~/eggo/Data/gRodon-files/")
load("Accession2Species.rda")
load("GrowthRates.rda")
load("CodonStatistics.rda")
# Merge growth data
rownames(spp_acc) <- spp_acc$V1 %>% gsub(pattern="[.].*",replace="")
cu$Accession <- cu$File %>% gsub(pattern="[.].*",replace="")
cu$Species <- spp_acc[cu$Accession,"V2"]
cu$Species <- lapply(cu$Species,rgrep,small_vec=d$Species) %>%
lapply("[",1) %>% unlist()
cu <- merge.easy(cu,d,key="Species")
## JLW 2020
set.seed(123456)
# Load Packages ----------------------------------------------------------------
library(dplyr)
library(data.table)
library(ggplot2)
library(ggpubr)
# Helper Functions -------------------------------------------------------------
merge.easy <- function(df1,df2,key){
df1 <- data.table(df1,key=key)
df2 <- data.table(df2,key=key)
return(unique(merge(df1,df2,all.x=TRUE,by=.EACHI,allow.cartesian=TRUE)))
}
rgrep <- function(big,small_vec){
small_vec[lapply(small_vec,grepl,x=big) %>% unlist()]
}
boxcoxTransform <- function(x, lambda, back_transform = F) {
if (back_transform == TRUE) {
(x*lambda +1)^(1/lambda)  %>% return()
} else {
(((x^lambda) - 1) / lambda) %>% return()
}
}
# Compile Dataset --------------------------------------------------------------
setwd("~/eggo/Data/gRodon-files/")
load("Accession2Species.rda")
load("GrowthRates.rda")
load("CodonStatistics.rda")
cu <- cu %>% mutate_all(unlist)
# Merge growth data
rownames(spp_acc) <- spp_acc$V1 %>% gsub(pattern="[.].*",replace="")
cu$Accession <- cu$File %>% gsub(pattern="[.].*",replace="")
cu$Species <- spp_acc[cu$Accession,"V2"]
cu$Species <- lapply(cu$Species,rgrep,small_vec=d$Species) %>%
lapply("[",1) %>% unlist()
cu <- merge.easy(cu,d,key="Species")
head(cu)
load("CodonStatistics_RefSeq.RData")
setwd("~/eggo/Data/eggo-data/")
load("CodonStatistics_RefSeq.RData")
## JLW 2020
set.seed(123456)
# Load Packages ----------------------------------------------------------------
library(dplyr)
library(data.table)
library(ggplot2)
library(ggpubr)
# Helper Functions -------------------------------------------------------------
merge.easy <- function(df1,df2,key){
df1 <- data.table(df1,key=key)
df2 <- data.table(df2,key=key)
return(unique(merge(df1,df2,all.x=TRUE,by=.EACHI,allow.cartesian=TRUE)))
}
rgrep <- function(big,small_vec){
small_vec[lapply(small_vec,grepl,x=big) %>% unlist()]
}
boxcoxTransform <- function(x, lambda, back_transform = F) {
if (back_transform == TRUE) {
(x*lambda +1)^(1/lambda)  %>% return()
} else {
(((x^lambda) - 1) / lambda) %>% return()
}
}
# Compile Dataset --------------------------------------------------------------
setwd("~/eggo/Data/eggo-data/")
load("CodonStatistics_RefSeq.RData")
setwd("~/eggo/Data/gRodon-files/")
load("Accession2Species.rda")
load("GrowthRates.rda")
load("CodonStatistics.rda")
cu <- cu %>% mutate_all(unlist)
# Merge growth data
rownames(spp_acc) <- spp_acc$V1 %>% gsub(pattern="[.].*",replace="")
cu$Accession <- cu$File %>% gsub(pattern="[.].*",replace="")
cu$Species <- spp_acc[cu$Accession,"V2"]
cu$Species <- lapply(cu$Species,rgrep,small_vec=d$Species) %>%
lapply("[",1) %>% unlist()
cu <- merge.easy(cu,d,key="Species")
# Merge genera
genus_df <- assembly_df %>% subset(select=c(Assembly,Genus,SppName)) %>%
mutate(Accession = gsub("[.].*","",Assembly))
cs_df <- merge.easy(cu,genus_df,key="Accession")
head(cs_df)
cs_df <- merge.easy(cu,genus_df,key="Accession") %>% subset(!is.na(d))
sppsub_df <- cs_df %>% subset(!is.na(Species)) %>% group_by(Species) %>% sample_n(1)
genus_multi <- names(table(sppsub_df$Genus))[table(sppsub_df$Genus)>1]
pair_df <- sppsub_df %>% subset(Genus %in% genus_multi) %>%
group_by(Genus) %>% sample_n(2) %>% group_by(Genus) %>%
summarise(d1=d[1],d2=d[2]) %>% subset(Genus!="")
pair_df$Ratio <- pair_df$d1/pair_df$d2
pair_df$Diff <- pair_df$d1 - pair_df$d2
p1 <- ggplot(pair_df,aes(x=d1,y=d2)) + geom_point(alpha=0.5) +
scale_x_log10() + scale_y_log10() + theme_bw() + geom_smooth() +
geom_abline(intercept=0,slope=1,lty=2) +
xlab("Growth Rate of Organism 1") +
ylab("Growth Rate of Organism 2")
p1
bc_milc <- boxcox(d1~d2,data=pair_df)
library(MASS)
bc_milc <- boxcox(d1~d2,data=pair_df)
lambda <- bc_milc$x[which.max(bc_milc$y)]
lm(boxcoxTransform(d1, lambda) ~ d2,data=pair_df) %>% summary()
#Remove any large outliers (d>100)
sppsub_df <- assembly_df %>% subset(d<100) %>% group_by(SppName) %>% sample_n(1)
genus_multi <- names(table(sppsub_df$Genus))[table(sppsub_df$Genus)>1]
pair_df <- sppsub_df %>% subset(Genus %in% genus_multi) %>%
group_by(Genus) %>% sample_n(2) %>% group_by(Genus) %>%
summarise(d1=d[1],d2=d[2]) %>% subset(Genus!="")
pair_df$Ratio <- pair_df$d1/pair_df$d2
pair_df$Diff <- pair_df$d1 - pair_df$d2
p2 <- ggplot(pair_df,aes(x=d1,y=d2)) + geom_point(alpha=0.5) +
scale_x_log10() + scale_y_log10() + theme_bw() + geom_smooth() +
geom_abline(intercept=0,slope=1,lty=2) +
xlab("Growth Rate of Organism 1") +
ylab("Growth Rate of Organism 2")
bc_milc <- boxcox(d1~d2,data=pair_df)
lambda <- bc_milc$x[which.max(bc_milc$y)]
lm(boxcoxTransform(d1, lambda) ~ d2,data=pair_df) %>% summary()
p2
## JLW 2020
set.seed(123456)
# Load Packages ----------------------------------------------------------------
library(dplyr)
library(data.table)
library(ggplot2)
library(ggpubr)
library(MASS)
# Helper Functions -------------------------------------------------------------
merge.easy <- function(df1,df2,key){
df1 <- data.table(df1,key=key)
df2 <- data.table(df2,key=key)
return(unique(merge(df1,df2,all.x=TRUE,by=.EACHI,allow.cartesian=TRUE)))
}
rgrep <- function(big,small_vec){
small_vec[lapply(small_vec,grepl,x=big) %>% unlist()]
}
boxcoxTransform <- function(x, lambda, back_transform = F) {
if (back_transform == TRUE) {
(x*lambda +1)^(1/lambda)  %>% return()
} else {
(((x^lambda) - 1) / lambda) %>% return()
}
}
# Compile Dataset --------------------------------------------------------------
setwd("~/eggo/Data/eggo-data/")
load("CodonStatistics_RefSeq.RData")
setwd("~/eggo/Data/gRodon-files/")
load("Accession2Species.rda")
load("GrowthRates.rda")
load("CodonStatistics.rda")
cu <- cu %>% mutate_all(unlist)
# Merge growth data
rownames(spp_acc) <- spp_acc$V1 %>% gsub(pattern="[.].*",replace="")
cu$Accession <- cu$File %>% gsub(pattern="[.].*",replace="")
cu$Species <- spp_acc[cu$Accession,"V2"]
cu$Species <- lapply(cu$Species,rgrep,small_vec=d$Species) %>%
lapply("[",1) %>% unlist()
cu <- merge.easy(cu,d,key="Species")
# Merge genera
genus_df <- assembly_df %>% subset(select=c(Assembly,Genus,SppName)) %>%
mutate(Accession = gsub("[.].*","",Assembly))
cs_df <- merge.easy(cu,genus_df,key="Accession") %>% subset(!is.na(d))
# Actual d ---------------------------------------------------------------------
sppsub_df <- cs_df %>% subset(!is.na(Species)) %>% group_by(Species) %>% sample_n(1)
genus_multi <- names(table(sppsub_df$Genus))[table(sppsub_df$Genus)>1]
pair_df <- sppsub_df %>% subset(Genus %in% genus_multi) %>%
group_by(Genus) %>% sample_n(2) %>% group_by(Genus) %>%
summarise(d1=d[1],d2=d[2]) %>% subset(Genus!="")
pair_df$Ratio <- pair_df$d1/pair_df$d2
pair_df$Diff <- pair_df$d1 - pair_df$d2
p1 <- ggplot(pair_df,aes(x=d1,y=d2)) + geom_point(alpha=0.5) +
scale_x_log10() + scale_y_log10() + theme_bw() + geom_smooth() +
geom_abline(intercept=0,slope=1,lty=2) +
xlab("Growth Rate of Organism 1") +
ylab("Growth Rate of Organism 2")
bc_milc <- boxcox(d1~d2,data=pair_df)
lambda <- bc_milc$x[which.max(bc_milc$y)]
lm(boxcoxTransform(d1, lambda) ~ d2,data=pair_df) %>% summary()
# Inferred d Pairs -------------------------------------------------------------
#Remove any large outliers (d>100)
sppsub_df <- assembly_df %>% subset(d<100) %>% group_by(SppName) %>% sample_n(1)
genus_multi <- names(table(sppsub_df$Genus))[table(sppsub_df$Genus)>1]
pair_df <- sppsub_df %>% subset(Genus %in% genus_multi) %>%
group_by(Genus) %>% sample_n(2) %>% group_by(Genus) %>%
summarise(d1=d[1],d2=d[2]) %>% subset(Genus!="")
pair_df$Ratio <- pair_df$d1/pair_df$d2
pair_df$Diff <- pair_df$d1 - pair_df$d2
p2 <- ggplot(pair_df,aes(x=d1,y=d2)) + geom_point(alpha=0.5) +
scale_x_log10() + scale_y_log10() + theme_bw() + geom_smooth() +
geom_abline(intercept=0,slope=1,lty=2) +
xlab("Growth Rate of Organism 1") +
ylab("Growth Rate of Organism 2")
bc_milc <- boxcox(d1~d2,data=pair_df)
lambda <- bc_milc$x[which.max(bc_milc$y)]
lm(boxcoxTransform(d1, lambda) ~ d2,data=pair_df) %>% summary()
# Put it together --------------------------------------------------------------
setwd("~/eggo/Figs")
pdf("Pair_Prediction.pdf",width=7,height=3)
ggarrange(p1,p2,ncol=2,labels=c("(a)","(b)"))
dev.off()
