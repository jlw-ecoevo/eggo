# MarRef
load("CodonStatistics_MarRef.RData")
marref <- assembly_df %>% subset(select=c(nHE,
FilteredSequences,
d,
LowerCI,
UpperCI,
Assembly)) %>%
mutate(Source = "MarRef",
Mode = "Full",
Type = "Isolate",
Environment = "Marine")
#Nayfach
load("CodonStatistics_Nayfach.RData")
nayfach <- mag_df %>% subset(select=c(nHE,
FilteredSequences,
d,
LowerCI,
UpperCI,
Assembly)) %>%
mutate(Source = "Nayfach et al.",
Mode = "Partial",
Type = "MAG",
Environment = "Human Gut")
#Pasolli
load("CodonStatistics_Pasolli.RData")
pasolli <- mag_df %>% subset(select=c(nHE,
FilteredSequences,
d,
LowerCI,
UpperCI,
Assembly)) %>%
mutate(Source = "Pasolli et al.",
Mode = "Partial",
Type = "MAG",
Environment = "Human Microbiome")
#Poyet
load("CodonStatistics_Poyet.RData")
poyet <- assembly_df %>% subset(select=c(nHE,
FilteredSequences,
d,
LowerCI,
UpperCI,
Assembly)) %>%
mutate(Source = "Poyet et al.",
Mode = "Full",
Type = "Isolate",
Environment = "Human Gut")
#refseq
load("CodonStatistics_RefSeq.RData")
refseq <- assembly_df %>% subset(select=c(nHE,
FilteredSequences,
d,
LowerCI,
UpperCI,
Assembly)) %>%
mutate(Source = "RefSeq Assemblies",
Mode = "Full",
Type = "Isolate",
Environment = "") %>%
subset(nHE>50 & nHE<70)
#tully
load("CodonStatistics_Tully.RData")
tully <- mag_df %>% subset(select=c(nHE,
FilteredSequences,
d,
LowerCI,
UpperCI,
Assembly)) %>%
mutate(Source = "Tully et al.",
Mode = "Partial",
Type = "MAG",
Environment = "Marine")
#Delmont
load("CodonStatistics_Delmont.RData")
delmont <- mag_df %>% subset(select=c(nHE,
FilteredSequences,
d,
LowerCI,
UpperCI,
Assembly)) %>%
mutate(Source = "Delmont et al.",
Mode = "Partial",
Type = "MAG",
Environment = "Marine")
#Parks
load("CodonStatistics_Parks.RData")
parks <- mag_df %>% subset(select=c(nHE,
FilteredSequences,
d,
LowerCI,
UpperCI,
Assembly)) %>%
mutate(Source = "Parks et al.",
Mode = "Partial",
Type = "MAG",
Environment = "")
#zou
load("CodonStatistics_Zou.RData")
zou <- assembly_df %>% subset(select=c(nHE,
FilteredSequences,
d,
LowerCI,
UpperCI,
Assembly)) %>%
mutate(Source = "Zou et al.",
Mode = "Full",
Type = "Isolate",
Environment = "Human Gut")
rm("mag_df","sag_df","assembly_df")
# Put Together -----------------------------------------------------------------
EGGO <- rbind(refseq,
parks,
gorg,
tully,
delmont,
marref,
nayfach,
pasolli,
poyet,
zou) %>%
subset(nHE>=10)
table(EGGO$Environment)
table(EGGO$Type)
table(EGGO$Source)
nrow(EGGO)
19276+7214
sum(refseq$d>100)
## JLW 2020 - EGGO RefSeq Analysis
# Load Packages ----------------------------------------------------------------
library(dplyr)
library(ggplot2)
library(mclust)
library(ggpubr)
library(RColorBrewer)
set.seed("123456")
# Load Data --------------------------------------------------------------------
setwd("~/eggo/Data/eggo-data")
load("CodonStatistics_Parks.RData")
mag_df <- mag_df %>% subset(nHE>=10)
load("CodonStatistics_RefSeq.RData")
#Remove Genomes w/ Unrealistic #'s of Ribosomal Proteins
quantile(assembly_df$nHE,c(0.005,0.995))
assembly_df <- assembly_df %>% subset(nHE>50 & nHE<70)
# Plot Overall Distribution ----------------------------------------------------
setwd("~/eggo/Figs")
pdf("RefSeq_Growth_All.pdf",width=7,height=5)
ggplot(assembly_df,aes(x=d)) + geom_density() +
scale_x_log10(limit=c(0.05,100)) + theme_bw() +
geom_vline(xintercept = 5, color = "red", lty = 2) +
xlab("Predicted Doubling Time (Hours)")
dev.off()
# Subsample by genus -----------------------------------------------------------
genus_df <- assembly_df %>% group_by(Genus) %>% sample_n(1)
# Cluster growth rates ---------------------------------------------------------
x <- log10(genus_df$d)
m <- Mclust(x)
p <- (colSums(m$z)/sum(m$z))
cl_df <- data.frame(x=10^seq(-2,3,0.01),
cl1=dnorm(seq(-2,3,0.01),
mean=m$parameters$mean[1],
sd=sqrt(m$p$variance$sigmasq))*p[1],
cl2=dnorm(seq(-2,3,0.01),
mean=m$parameters$mean[2],
sd=sqrt(m$p$variance$sigmasq))*p[2])
p1 <- ggplot() + geom_density(data=genus_df,aes(x=d),lwd=1.5) +
scale_x_log10(limit=c(0.05,100)) +
geom_line(data=cl_df,aes(x=x,y=cl1,color="Cluster 1"),lwd=1) +
geom_line(data=cl_df,aes(x=x,y=cl2,color="Cluster 2"),lwd=1) +
theme_bw() + scale_color_brewer(palette = "Set1")  +
geom_vline(xintercept = 5, color = "red", lty = 2) +
xlab("Predicted Doubling Time (Hours)")  +
labs(color="")
p1
m$parameters$mean
10^m$parameters$mean
## JLW 2020 - EGGO Gut MAGs and Isolate Genomes
# Load Packages ----------------------------------------------------------------
library(dplyr)
library(ggplot2)
library(ggpubr)
library(RColorBrewer)
# Load Data --------------------------------------------------------------------
setwd("~/eggo/Data/eggo-data")
load("CodonStatistics_Poyet.RData")
isolate_df1 <- assembly_df
load("CodonStatistics_Zou.RData")
isolate_df2 <- assembly_df
load("CodonStatistics_Pasolli.RData")
mag_df <- mag_df %>% subset(nHE>=10)
all_mag <- mag_df
mag_df <- mag_df %>% subset(!is.na(d)) %>% subset(Body.Site=="Stool")
# Plot Comparison --------------------------------------------------------------
p1 <- ggplot(NULL,aes(x=d)) +
geom_density(data=isolate_df1,aes(fill="Poyet et al Isolates"),
alpha=0.5,color="white") +
geom_density(data=isolate_df2,aes(fill="Zou et al Isolates"),
alpha=0.5,color="white") +
geom_density(data=mag_df,aes(fill="Pasolli et al MAGs"),
alpha=0.5,color="white") +
scale_x_log10(limit=c(0.09,15)) + theme_bw() +
scale_fill_brewer(palette = "Dark2") +
theme(legend.title = element_blank(),legend.position = "bottom") +
geom_vline(xintercept = 5, lty = 2, color = "red") +
xlab("Predicted Doubling Time (Hours)")
x <- data.frame(Fast=rep(c(F,T),3),
Data=c("Isolate (Poyet)","Isolate (Poyet)","Isolate (Zou)","Isolate (Zou)","MAG","MAG"),
Value=c(table(isolate_df1$d>5)/nrow(isolate_df1),
table(isolate_df2$d>5)/nrow(isolate_df2),
table(mag_df$d>5)/nrow(mag_df)))
p2 <- ggplot(x%>%subset(Fast==T),aes(x=Data,y=Value,fill=Data)) +
geom_bar(position="stack", stat="identity",alpha=0.75) +
theme_bw() + xlab("") +
ylab(expression("Proportion Doubling Times  >5 Hours")) +
# theme(axis.text.x = element_text(angle = 90,hjust=1),legend.position = "none") +
# scale_fill_brewer(palette = "Dark2",direction = -1)+
theme(legend.position = "none") +
scale_fill_manual(values = brewer.pal(3,"Dark2")[c(2,3,1)]) +
ggpubr::rotate_x_text()
# Comparison of microbes assoc. w/ non-westernized microbiomes -----------------
mag_df$NonWesternized <- "All"
mag_df$NonWesternized[mag_df$Non.westernized.enriched == "Yes"] <-
"Non-Westernized"
table(mag_df$NonWesternized)
t.test(log10(d)~NonWesternized,data=mag_df)
## JLW 2020 - Do big cells grow fast?
# Load Packages ----------------------------------------------------------------
library(dplyr)
library(data.table)
library(ggplot2)
library(ggpubr)
library(RColorBrewer)
# Helper Function --------------------------------------------------------------
merge.easy <- function(df1,df2,key){
df1 <- data.table(df1,key=key)
df2 <- data.table(df2,key=key)
return(unique(merge(df1,df2,all.x=TRUE,by=.EACHI,allow.cartesian=TRUE)))
}
# Load Data --------------------------------------------------------------------
setwd("~/eggo/Data/eggo-data")
load("CodonStatistics_GORG.RData")
sag_df$CUBgenomic <- sag_df$CUBgenomic %>% lapply(median) %>% unlist()
sag_df_all <- sag_df %>% mutate_all(unlist)
sag_df <- sag_df_all %>% subset(nHE>=10)
setwd("~/eggo/Data/")
load("GORGsize.RData")
sag_df <- merge.easy(sag_df,gorg_sizes,key="ID")
sdf <- sag_df %>% subset(!is.na(CellDiameter)) %>%
subset(CellDiameter!="<0.5")%>%
mutate(CellDiameter=as.numeric(CellDiameter))
sdf <- sdf %>% mutate(CellDiameter=as.numeric(CellDiameter))
# Stats ------------------------------------------------------------------------
table(sdf$CellDiameter < quantile((sdf$CellDiameter),c(0.99)),
sdf$d > quantile((sdf$d),c(0.01))) %>%
fisher.test()
## JLW 2020
set.seed(123456)
# Load Packages ----------------------------------------------------------------
library(dplyr)
library(data.table)
library(ggplot2)
library(ggpubr)
library(MASS)
# Helper Functions -------------------------------------------------------------
merge.easy <- function(df1,df2,key){
df1 <- data.table(df1,key=key)
df2 <- data.table(df2,key=key)
return(unique(merge(df1,df2,all.x=TRUE,by=.EACHI,allow.cartesian=TRUE)))
}
rgrep <- function(big,small_vec){
small_vec[lapply(small_vec,grepl,x=big) %>% unlist()]
}
boxcoxTransform <- function(x, lambda, back_transform = F) {
if (back_transform == TRUE) {
(x*lambda +1)^(1/lambda)  %>% return()
} else {
(((x^lambda) - 1) / lambda) %>% return()
}
}
# Compile Dataset --------------------------------------------------------------
setwd("~/eggo/Data/eggo-data/")
load("CodonStatistics_RefSeq.RData")
setwd("~/eggo/Data/gRodon-files/")
load("Accession2Species.rda")
load("GrowthRates.rda")
load("CodonStatistics.rda")
cu <- cu %>% mutate_all(unlist)
# Merge growth data
rownames(spp_acc) <- spp_acc$V1 %>% gsub(pattern="[.].*",replace="")
cu$Accession <- cu$File %>% gsub(pattern="[.].*",replace="")
cu$Species <- spp_acc[cu$Accession,"V2"]
cu$Species <- lapply(cu$Species,rgrep,small_vec=d$Species) %>%
lapply("[",1) %>% unlist()
cu <- merge.easy(cu,d,key="Species")
# Merge genera
genus_df <- assembly_df %>% subset(select=c(Assembly,Genus,SppName)) %>%
mutate(Accession = gsub("[.].*","",Assembly))
cs_df <- merge.easy(cu,genus_df,key="Accession") %>% subset(!is.na(d))
# Actual d ---------------------------------------------------------------------
sppsub_df <- cs_df %>% subset(!is.na(Species)) %>% group_by(Species) %>% sample_n(1)
genus_multi <- names(table(sppsub_df$Genus))[table(sppsub_df$Genus)>1]
pair_df <- sppsub_df %>% subset(Genus %in% genus_multi) %>%
group_by(Genus) %>% sample_n(2) %>% group_by(Genus) %>%
summarise(d1=d[1],d2=d[2]) %>% subset(Genus!="")
pair_df$Ratio <- pair_df$d1/pair_df$d2
pair_df$Diff <- pair_df$d1 - pair_df$d2
p1 <- ggplot(pair_df,aes(x=d1,y=d2)) + geom_point(alpha=0.5) +
scale_x_log10() + scale_y_log10() + theme_bw() + geom_smooth() +
geom_abline(intercept=0,slope=1,lty=2) +
xlab("Growth Rate of Organism 1") +
ylab("Growth Rate of Organism 2")
bc_milc <- boxcox(d1~d2,data=pair_df)
lambda <- bc_milc$x[which.max(bc_milc$y)]
lm(boxcoxTransform(d1, lambda) ~ d2,data=pair_df) %>% summary()
#Remove any large outliers (d>100)
sppsub_df <- assembly_df %>% subset(d<100) %>% group_by(SppName) %>% sample_n(1)
genus_multi <- names(table(sppsub_df$Genus))[table(sppsub_df$Genus)>1]
pair_df <- sppsub_df %>% subset(Genus %in% genus_multi) %>%
group_by(Genus) %>% sample_n(2) %>% group_by(Genus) %>%
summarise(d1=d[1],d2=d[2]) %>% subset(Genus!="")
pair_df$Ratio <- pair_df$d1/pair_df$d2
pair_df$Diff <- pair_df$d1 - pair_df$d2
p2 <- ggplot(pair_df,aes(x=d1,y=d2)) + geom_point(alpha=0.5) +
scale_x_log10() + scale_y_log10() + theme_bw() + geom_smooth() +
geom_abline(intercept=0,slope=1,lty=2) +
xlab("Growth Rate of Organism 1") +
ylab("Growth Rate of Organism 2")
bc_milc <- boxcox(d1~d2,data=pair_df)
lambda <- bc_milc$x[which.max(bc_milc$y)]
lm(boxcoxTransform(d1, lambda) ~ d2,data=pair_df) %>% summary()
lmsum <- lm(boxcoxTransform(d1, lambda) ~ d2,data=pair_df) %>% summary()
lmsum <- lm(boxcoxTransform(d1, lambda) ~ d2,data=pair_df) %>% summary()
lmsum$coefficients
lmsum$adj.r.squared
library(dplyr)
library(data.table)
library(ape)
library(ggplot2)
library(ggpubr)
library(castor)
library(MASS)
library(reshape2)
library(parallel)
library(psych)
set.seed(123456)
merge.easy <- function(df1,df2,key){
df1 <- data.table(df1,key=key)
df2 <- data.table(df2,key=key)
return(unique(merge(df1,df2,all.x=TRUE,by=.EACHI,allow.cartesian=TRUE)) %>%
as.data.frame())
}
boxcoxTransform <- function(x, lambda, back_transform = F) {
if (back_transform == TRUE) {
(x*lambda +1)^(1/lambda)  %>% return()
} else {
(((x^lambda) - 1) / lambda) %>% return()
}
}
sqErrBoxCox <- function(d1,d2,lambda){
(boxcoxTransform(d1,lambda = lambda) -
boxcoxTransform(d2,lambda = lambda))^2
}
getNeighborhoodPrediction <- function(i, tree, values, n = 5, threshold = 1e-8){
if(i%%100==0){print(i)}
to_drop <- i
nt <- numeric(n)
dnt <- numeric(n)
for(neighbor in 1:n){
nt[neighbor] <- find_nearest_tips(tree,
target_tips = tree$tip.label[-to_drop])$nearest_tip_per_tip[i]
dnt[neighbor] <- find_nearest_tips(tree,
target_tips = tree$tip.label[-to_drop])$nearest_distance_per_tip[i]
to_drop <- c(to_drop, nt[neighbor])
}
tip_weights <- 1/(dnt+threshold)
vals <- values[nt]
return(c(Actual = values[i],
Predicted = weightedGeometricMean(vals, tip_weights),
MeanDistance = mean(dnt)))
}
weightedGeometricMean <- function(x, w, na.rm = TRUE, zero.propagate = FALSE){
if(any(x < 0, na.rm = TRUE)){
return(NaN)
}
if(zero.propagate){
if(any(x == 0, na.rm = TRUE)){
return(0)
}
return(exp(weighted.mean(log(x), w, na.rm=na.rm)))
} else {
nonzero_ind <- x>0 & w>0
w <- w[nonzero_ind]
x <- x[nonzero_ind]
return(exp(weighted.mean(log(x), w, na.rm=na.rm)))
}
}
setwd("~/eggo/Data")
load("gRodon-files/sysdata.rda")
load("EGGO.RData")
tip_names <- read.delim("16S_seqnames.txt", sep = "\t", header = F, stringsAsFactors = F)
names(tip_names) <- c("File","Tip")
tip_names$ID <- tip_names$File %>%
gsub(pattern = "_rna_from_.*", replace = "") %>%
gsub(pattern = ".fa.ffn.16S*", replace = "") %>%
gsub(pattern = "_prokka.ffn.16S*", replace = "")
EGGO <- EGGO %>% mutate(ID = Assembly) %>%
mutate_all(unlist) %>%
subset(select=c(ID,d,LowerCI,UpperCI))
tip_meta <- merge.easy(tip_names,EGGO,key="ID")
rownames(tip_meta) <- tip_meta$Tip
x <- read.tree("16S.cut80.tree")
#Sample One 16S Per Organism
tip_meta_sub <- tip_meta %>%
subset(Tip %in% x$tip.label & !is.na(d)) %>%
group_by(File) %>%
sample_n(1) %>%
as.data.frame(stringsAsFactors=FALSE)
rownames(tip_meta_sub) <- tip_meta_sub$Tip
x_sub <- drop.tip(x, which(!(x$tip.label %in% tip_meta_sub$Tip)))
# #Predict - very slow
# neighbor_pred_list <- mclapply(1:Ntip(x_sub),
#                                getNeighborhoodPrediction,
#                                tree=x_sub,
#                                values=tip_meta_sub[x_sub$tip.label,"d"],
#                                mc.cores = 6)
# neighbor_pred <- do.call("rbind",neighbor_pred_list) %>%
#   as.data.frame(stringsAsFactors = F)
# setwd("~/eggo/Data")
# save(neighbor_pred, file = "neighbors.RData")
#
# nt <- numeric(length(x$tip.label))
# dnt <- numeric(length(x$tip.label))
# for(i in 1:length(x$tip.label)){
#   if(i%%100==0){print(i)}
#   nt[i] <- find_nearest_tips(x, target_tips = x$tip.label[-i])$nearest_tip_per_tip[i]
#   dnt[i] <- find_nearest_tips(x, target_tips = x$tip.label[-i])$nearest_distance_per_tip[i]
# }
#
# x_dist <- data.frame(Name = x$tip.label,
#                      Nearest = nt,
#                      NearestDist = dnt)
# x_dist$Name <- as.character(x_dist$Name)
# x_dist$NearestName <- x$tip.label[x_dist$Nearest]
# x_dist$d1 <- tip_meta[x_dist$Name,"d"]
# x_dist$d2 <- tip_meta[x_dist$NearestName,"d"]
# x_dist$Org1 <- tip_meta[x_dist$Name,"ID"]
# x_dist$Org2 <- tip_meta[x_dist$NearestName,"ID"]
# setwd("~/eggo/Data")
# save(x_dist,file="nearest_neighbors.RData")
setwd("~/eggo/Data")
load("neighbors.RData")
#Sample 10000 tips
n <- 10000
x_subsub <- drop.tip(x_sub, sample(1:Ntip(x_sub), Ntip(x_sub) - n, replace = FALSE))
#Distances
x_dist_matrix <- cophenetic.phylo(x_subsub)
x_dist_matrix[upper.tri(x_dist_matrix)] <- NA
x_dist <- melt(x_dist_matrix,
varnames = c('Tip1', 'Tip2'),
na.rm = TRUE) %>%
mutate(Tip1 = as.character(Tip1)) %>%
mutate(Tip2 = as.character(Tip2))
x_dist$d1 <- tip_meta[x_dist$Tip1,"d"]
x_dist$d2 <- tip_meta[x_dist$Tip2,"d"]
x_dist$Org1 <- tip_meta[x_dist$Tip1,"ID"]
x_dist$Org2 <- tip_meta[x_dist$Tip2,"ID"]
x_dist$dErr <- (log10(x_dist$d1)-log10(x_dist$d2))^2
x_dist$dErr2 <- abs((x_dist$d1)-(x_dist$d2))
cor.test(log10(neighbor_pred$Actual),log10(neighbor_pred$Predicted))
cor.test(xd$ld1,xd$ld2)
setwd("~/eggo/Data")
load("nearest_neighbors.RData")
xd <- x_dist %>% subset(Org1!=Org2) %>% subset(d1<100 & d2<100)
xd$ld1 <- log10(xd$d1)
xd$ld2 <- log10(xd$d2)
xd$dErr <- (xd$ld1-xd$ld2)^2
cor.test(xd$ld1,xd$ld2)
table(neighbor_pred$Actual>5,neighbor_pred$Predicted>5)
table(neighbor_pred$Actual>5,neighbor_pred$Predicted>5) %>% cohen.kappa()
table(neighbor_pred$Actual>5,neighbor_pred$Predicted>5) %>% accuracy()
diag(table(neighbor_pred$Actual>5,neighbor_pred$Predicted>5))
sum(diag(table(neighbor_pred$Actual>5,neighbor_pred$Predicted>5)))
confusion_matrix <- table(neighbor_pred$Actual>5,neighbor_pred$Predicted>5)
sum(confusion_matrix)
sum(diag(confusion_matrix))/sum(confusion_matrix)
## JLW 2020 - Growth/Error Assoc. W/ Ne?
# Load Packages ----------------------------------------------------------------
library(dplyr)
library(data.table)
library(ggplot2)
library(ggpubr)
# Helper Functions -------------------------------------------------------------
merge.easy <- function(df1,df2,key){
df1 <- data.table(df1,key=key)
df2 <- data.table(df2,key=key)
return(unique(merge(df1,df2,all.x=TRUE,by=.EACHI,allow.cartesian=TRUE)))
}
# Load Data --------------------------------------------------------------------
setwd("~/eggo/Data")
load("stat_data.RData")
ne <- read.csv("Ne_Bobay2018.csv", head = T, stringsAsFactors = F)
ne$Species[lapply(ne$Species,grepl,x=stat_data$Species) %>%
lapply(sum) %>% unlist() %>% as.logical()] <-
stat_data$Species[lapply(ne$Species,grep,x=stat_data$Species) %>% unlist()]
stat_data <- merge.easy(stat_data, ne, key = "Species")
# Stats ------------------------------------------------------------------------
summary(lm(d ~ Ne, data=stat_data))
summary(lm(Residual ~ Ne, data=stat_data))
summary(lm(log10(d) ~ Ne, data=stat_data))
summary(lm(d ~ Ne, data=stat_data))
summary(lm(d ~ Ne, data=stat_data))
summary(lm(Residual ~ Ne, data=stat_data))
